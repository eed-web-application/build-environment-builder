name: Go Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

jobs:
  build-for-test:
    name: Build for Test
    runs-on: ubuntu-latest

    steps:
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.22.1'  # Use the version of Go in your project

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build
      run: go build -v ./...

    - name: Check for docker-compose.yml file
      uses: andstor/file-existence-action@v2
      id: check_files
      with:
        files: ".devcontainer/docker-compose.yml"
        
    - name: Launch test backend
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        docker compose -f .devcontainer/docker-compose.yml --profile=pipeline up -d
        sleep 10

    - name: Test
      run: |
        wget https://github.com/ufoscout/docker-compose-wait/releases/download/2.12.1/wait_x86_64 -O wait
        chmod a+x wait
        ./wait
        go test -v ./...
      env:
          CBS_TEST_HOST: http://localhost:8081
          WAIT_HOSTS: localhost:8081

    - name: Shutdown test backend
      if: steps.check_files.outputs.files_exists == 'true' &&  (success() || failure())
      run: |
        docker compose -f .devcontainer/docker-compose.yml logs
        docker compose -f .devcontainer/docker-compose.yml down -v
  build:
    name: Build for Linux and macOS
    needs: build-for-test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22.1' # Adjust to match your Go version

    - name: Build binary for Linux
      run: |
        GOOS=linux GOARCH=amd64 go build -o cbs-linux-amd64
        tar -czvf cbs-linux-amd64.tar.gz -C . cbs-linux-amd64
      env:
        GO111MODULE: on

    - name: Build binary for macOS
      run: |
        GOOS=darwin GOARCH=amd64 go build -o cbs-darwin-amd64
        tar -czvf cbs-darwin-amd64.tar.gz -C . cbs-darwin-amd64
      env:
        GO111MODULE: on
    - name: ls
      run: |
        ls -la
    - name: Archive Linux binary
      uses: actions/upload-artifact@v3
      with:
        name: cbs-darwin-amd64.tar.gz
        path: cbs-darwin-amd64.tar.gz

    - name: Archive macOS binary
      uses: actions/upload-artifact@v3
      with:
        name: cbs-linux-amd64.tar.gz
        path: cbs-linux-amd64.tar.gz

  create-and-upload-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: list artifacts
        run: |
          ls -la artifacts/
      - name: Determine if release exists
        id: check_release
        run: |
          if gh release view ${{ github.ref_name }}; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release and Upload Assets if not exist
        if: env.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/cbs-linux-amd64.tar.gz
            artifacts/cbs-darwin-amd64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Assets to Existing Release if exists
        if: env.RELEASE_EXISTS == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/cbs-linux-amd64.tar.gz
            artifacts/cbs-darwin-amd64.tar.gz
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}